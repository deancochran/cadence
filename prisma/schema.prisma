generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  id                      String                       @id @unique
  username                String                       @unique
  email                   String                       @unique
  email_verified          Boolean                      @default(false)
  created_at              DateTime                     @default(now())
  stripe_id               String?                      @unique
  role                    UserRole?                    @default(BASE)
  bike_ftp                Int                          @default(100)
  run_ftp                 Int                          @default(480)
  swim_ftp                Int                          @default(240)
  unitType                UnitType                     @default(METRIC)
  activities              activities[]
  emailVerificationTokens emailVerificationToken[]
  keys                    key[]
  passwordResetTokens     passwordResetToken[]
  auth_sessions           session[]
  subscriptions           subscription?
  integration_logs        thirdPartyIntegrationLogs[]
  integrations            thirdPartyIntegrationToken[]
  userCalendar            userCalendar[]

  @@index([id])
}

model subscription {
  user_id              String    @id @unique
  cancel_at            DateTime?
  cancel_at_period_end Boolean?
  canceled_at          DateTime?
  current_period_start DateTime
  current_period_end   DateTime
  created              DateTime
  ended_at             DateTime?
  start_date           DateTime
  trial_start          DateTime?
  trial_end            DateTime?
  metadata             Json
  status               String
  stripe_sub_id        String    @unique
  user                 user      @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
}

model session {
  id             String @id @unique
  user_id        String
  active_expires BigInt
  idle_expires   BigInt
  user           user   @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model key {
  id              String  @id @unique
  hashed_password String?
  user_id         String
  user            user    @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model passwordResetToken {
  id      String  @id @unique
  expires BigInt?
  user_id String
  user    user    @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model emailVerificationToken {
  id      String  @id @unique
  expires BigInt?
  user_id String
  user    user    @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model thirdPartyIntegrationToken {
  id             Int                            @id @default(autoincrement())
  user_id        String
  provider       ThirdPartyIntegrationProvider?
  expires_at     BigInt
  expires_in     BigInt
  createdAt      DateTime                       @default(now())
  updatedAt      DateTime                       @updatedAt
  access_token   String
  refresh_token  String
  integration_id String                         @unique
  logs           thirdPartyIntegrationLogs[]
  user           user                           @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model thirdPartyIntegrationLogs {
  id        Int                            @id @default(autoincrement())
  provider  ThirdPartyIntegrationProvider?
  createdAt DateTime                       @default(now())
  updatedAt DateTime                       @updatedAt
  metadata  Json
  user_id   String
  token_id  Int
  activity  activities?
  token     thirdPartyIntegrationToken     @relation(fields: [token_id], references: [id], onDelete: Cascade)
  user      user                           @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model activities {
  id                       Int                        @id @unique @default(autoincrement())
  type                     ActivityType
  distance                 Float
  duration                 Int
  date                     DateTime                   @default(now())
  user_id                  String
  stress_score             Int
  thirdparty_log_id        Int?                       @unique
  intensity_factor_score   Int
  thirdPartyIntegrationLog thirdPartyIntegrationLogs? @relation(fields: [thirdparty_log_id], references: [id], onDelete: Cascade)
  user                     user                       @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model userCalendar {
  id      Int     @id @default(autoincrement())
  user_id String
  events  event[]
  user    user    @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model event {
  id          Int          @id @default(autoincrement())
  eventType   EventType
  date        DateTime     @default(now())
  // Add other event-related fields as needed
  user_cal_id Int
  user_cal    userCalendar @relation(fields: [user_cal_id], references: [id], onDelete: Cascade)
}

enum EventType {
  WORKOUT
}

enum ActivityType {
  CYCLING
  SWIMMING
  RUNNING
}

enum UserRole {
  PRO
  BASE
}

enum ThirdPartyIntegrationProvider {
  STRAVA
}

enum UnitType {
  IMPERIAL
  METRIC
}
