generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider = "prisma-erd-generator"
  output   = "../erd/ERD.svg"
  theme    = "forest"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  id               String                       @id @unique
  username         String                       @unique
  email            String                       @unique
  email_verified   Boolean                      @default(false)
  hashed_password  String
  created_at       DateTime                     @default(now())
  stripe_id        String?                      @unique
  role             UserRole                     @default(BASE)
  bike_ftp         Int                          @default(0)
  run_ftp          Int                          @default(0)
  swim_ftp         Int                          @default(0)
  unit_type        UnitType                     @default(METRIC)
  max_hr           Int                          @default(0)
  activities       activities[]
  email_tokens     emailVerificationToken[]
  keys             key[]
  password_tokens  passwordResetToken[]
  auth_sessions    session[]
  subscription     subscription?
  integration_logs thirdPartyIntegrationLogs[]
  integrations     thirdPartyIntegrationToken[]
  training_plans   trainingPlan[]

  @@index([id])
}

model subscription {
  user_id              String    @id @unique
  cancel_at            DateTime?
  cancel_at_period_end Boolean?
  canceled_at          DateTime?
  current_period_start DateTime
  current_period_end   DateTime
  created_at           DateTime  @default(now())
  ended_at             DateTime?
  start_date           DateTime
  trial_start          DateTime?
  trial_end            DateTime?
  metadata             Json
  status               String
  stripe_sub_id        String    @unique
  user                 user      @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "subscription_user_id_user_id_fk")

  @@index([user_id])
}

model session {
  id        String   @id @unique
  userId    String
  expiresAt DateTime
  user      user     @relation(fields: [userId], references: [id], onDelete: Cascade, map: "session_user_id_user_id_fk")
}

model key {
  id              String  @id @unique
  hashed_password String?
  user_id         String
  user            user    @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "key_user_id_user_id_fk")
}

model passwordResetToken {
  id          Int      @id @default(autoincrement())
  hashed_code String   @unique
  expires_at  DateTime
  user_id     String
  user        user     @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "passwordResetToken_user_id_user_id_fk")
}

model emailVerificationToken {
  id         Int      @id @default(autoincrement())
  code       String
  expires_at DateTime
  user_id    String
  user       user     @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "emailVerificationToken_user_id_user_id_fk")
}

model thirdPartyIntegrationToken {
  id             Int                           @id @default(autoincrement())
  user_id        String
  provider       ThirdPartyIntegrationProvider
  expires_at     DateTime
  created_at     DateTime                      @default(now())
  updated_at     DateTime                      @updatedAt
  access_token   String
  refresh_token  String
  integration_id String                        @unique
  logs           thirdPartyIntegrationLogs[]
  user           user                          @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "thirdPartyIntegrationToken_user_id_user_id_fk")
}

model thirdPartyIntegrationLogs {
  id         Int                           @id @default(autoincrement())
  provider   ThirdPartyIntegrationProvider
  created_at DateTime                      @default(now())
  updated_at DateTime                      @updatedAt
  metadata   Json
  user_id    String
  token_id   Int
  activity   activities?
  token      thirdPartyIntegrationToken    @relation(fields: [token_id], references: [id], onDelete: Cascade, map: "thirdPartyIntegrationLogs_token_id_thirdPartyIntegrationToken_i")
  user       user                          @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "thirdPartyIntegrationLogs_user_id_user_id_fk")
}

model activities {
  id                     Int                        @id @unique @default(autoincrement())
  type                   ActivityType
  distance               Float
  duration               Int
  date                   DateTime                   @default(now())
  user_id                String
  stress_score           Float
  thirdparty_log_id      Int?                       @unique
  intensity_factor_score Float
  log                    thirdPartyIntegrationLogs? @relation(fields: [thirdparty_log_id], references: [id], onDelete: Cascade, map: "activities_thirdparty_log_id_thirdPartyIntegrationLogs_id_fk")
  user                   user                       @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "activities_user_id_user_id_fk")
}

model trainingPlan {
  id                Int               @id @default(autoincrement())
  name              String
  description       String
  start_date        DateTime
  end_date          DateTime
  user_id           String
  user              user              @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "trainingPlan_user_id_user_id_fk")
  training_sessions trainingSession[]

  @@index([start_date, end_date])
}

model trainingSession {
  id               Int          @id @default(autoincrement())
  title            String
  activity_type    ActivityType
  description      String?
  date             DateTime
  distance         Int?
  duration         Int
  stress_score     Float
  plan             Json[]       @default([])
  training_plan_id Int
  training_plan    trainingPlan @relation(fields: [training_plan_id], references: [id], map: "trainingSession_training_plan_id_trainingPlan_id_fk")
}

enum ActivityType {
  SWIM
  BIKE
  RUN
}

enum UserRole {
  PRO
  BASE
  TRIAL
}

enum ThirdPartyIntegrationProvider {
  STRAVA
  WAHOO
}

enum UnitType {
  IMPERIAL
  METRIC
}
