generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  id                          String                       @id @unique
  username                    String                       @unique
  email                       String                       @unique
  email_verified              Boolean                      @default(false)
  created_at                  DateTime                     @default(now())
  stripe_id                   String?                      @unique
  role                        UserRole?                    @default(BASE)
  emailVerificationTokens     emailVerificationToken[]
  keys                        key[]
  passwordResetTokens         passwordResetToken[]
  auth_sessions               session[]
  Subscriptions               subscription[]
  ThirdPartyIntegrationTokens thirdPartyIntegrationToken[]

  @@index([id])
}

model subscription {
  stripe_id            String    @id @unique
  user_id              String
  cancel_at            DateTime?
  cancel_at_period_end Boolean?
  canceled_at          DateTime?
  current_period_start DateTime
  current_period_end   DateTime
  created              DateTime
  ended_at             DateTime?
  start_date           DateTime
  trial_start          DateTime?
  trial_end            DateTime?
  metadata             Json
  status               String
  user                 user      @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model session {
  id             String @id @unique
  user_id        String
  active_expires BigInt
  idle_expires   BigInt
  user           user   @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model key {
  id              String  @id @unique
  hashed_password String?
  user_id         String
  user            user    @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model passwordResetToken {
  id      String  @id @unique
  expires BigInt?
  user_id String
  user    user    @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model emailVerificationToken {
  id      String  @id @unique
  expires BigInt?
  user_id String
  user    user    @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model thirdPartyIntegrationToken {
  id            Int                            @id @default(autoincrement())
  user_id       String
  provider      ThirdPartyIntegrationProvider?
  expires_at    BigInt
  expires_in    BigInt
  createdAt     DateTime                       @default(now())
  updatedAt     DateTime                       @updatedAt
  access_token  String
  refresh_token String
  user          user                           @relation(fields: [user_id], references: [id])
}

model thirdPartyIntegrationLogs {
  id        Int                            @id @default(autoincrement())
  provider  ThirdPartyIntegrationProvider?
  createdAt DateTime                       @default(now())
  updatedAt DateTime                       @updatedAt
  metadata  Json
}

enum UserRole {
  PRO
  BASE
}

enum ThirdPartyIntegrationProvider {
  STRAVA
}
